// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package me.stark.tony.dagger;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<DaggerActivity> provideActivityProvider;

  private Provider<DaggerPresenter> daggerPresenterProvider;

  private MembersInjector<DaggerActivity> daggerActivityMembersInjector;

  private DaggerActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideActivityProvider =
        new Factory<DaggerActivity>() {
          private final ActivityModule activityModule = builder.activityModule;

          @Override
          public DaggerActivity get() {
            return Preconditions.checkNotNull(
                activityModule.provideActivity(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.daggerPresenterProvider = DaggerPresenter_Factory.create(provideActivityProvider);

    this.daggerActivityMembersInjector =
        DaggerActivity_MembersInjector.create(daggerPresenterProvider);
  }

  @Override
  public void inject(DaggerActivity arg0) {
    daggerActivityMembersInjector.injectMembers(arg0);
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private Builder() {}

    public ActivityComponent build() {
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }
  }
}
